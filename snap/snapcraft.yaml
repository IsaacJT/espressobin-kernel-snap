# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2021 Canonical Ltd

name: iotdevice-marvell-espressobin-kernel
summary: EspressoBin kernel for snappy
description: This is an EspressoBin snapped kernel

grade: stable
build-base: core20
confinement: strict
type: kernel
adopt-info: kernel

architectures:
  - build-on:
      - amd64
      - arm64
    run-on: arm64

parts:
  kernel:
    after:
      - optee-fde
    plugin: x-kernel
    source: git://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/focal
    source-type: git
    source-depth: 1
    source-branch: hwe-5.15
    kernel-compiler: ccache aarch64-linux-gnu-gcc
    kernel-with-firmware: false
    kernel-image-target: Image
    kernel-device-trees:
      - marvell/armada-3720-espressobin
    kernel-initrd-channel: stable
    kernel-initrd-compression: gz
    kernel-initrd-configured-modules:
      # Required for loading the SD-Card
      - sdhci-xenon-driver
      - gpio-regulator
      - nls_iso8859-1
      # Required for network access
      - mv88e6xxx
      - mvneta
      - mvmdio
    kernel-initrd-addons:
      - usr/bin/fde-reveal-key
      - usr/lib/libteec.so*
    kconfigflavour: generic
    kconfigs:
      # Disable image signing keys
      - CONFIG_SYSTEM_REVOCATION_KEYS=""
      - CONFIG_SYSTEM_TRUSTED_KEYS=""
      # This settings causes an error while building
      - CONFIG_DEBUG_INFO_BTF=n
      # Disable unneeded components (the device is headless)
      - CONFIG_SOUND=n
      - CONFIG_DRM=n
      - CONFIG_MEDIA_SUPPORT=n
      # OP-TEE support
      - CONFIG_TEE=y
      - CONFIG_OPTEE=y
      - CONFIG_HW_RANDOM_OPTEE=y
    # config.common.ports doesn't exist in the hwe-* branches, so just create an empty file
    override-pull: |
      snapcraftctl pull
      touch ${SNAPCRAFT_PART_SRC}/debian.hwe-5.15/config/config.common.ports
    override-build: |
      snapcraftctl build
      snapcraftctl set-version $(dpkg-parsechangelog -l ${SNAPCRAFT_PART_SRC}/debian.hwe-5.15/changelog -S version)
      mkimage -f ${SNAPCRAFT_PROJECT_DIR}/fitImage.its ${SNAPCRAFT_PART_INSTALL}/fitImage
    stage:
      - System.map-*
      - config-*
      - fitImage
      - initrd.img
      - kernel.img
      - modules
      - dtbs/*
      - -modules/*/build
      - -modules/*/source

  firmware:
    plugin: nil
    source: https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git
    source-type: git
    source-branch: main
    source-depth: 1
    override-build: |
      mkdir ${SNAPCRAFT_PART_INSTALL}/firmware
      cp -r ${SNAPCRAFT_PART_SRC}/* ${SNAPCRAFT_PART_INSTALL}/firmware/

  optee-os:
    plugin: dump
    source: https://github.com/OP-TEE/optee_os.git
    source-type: git
    source-tag: 3.10.0
    override-build: |
      # we are building optee-os only to get build export dependency to build REE app
      # so precise configs are esential
      if [ "${SNAPCRAFT_TARGET_ARCH}" = "arm64" ]; then
          export CROSS_COMPILE_ta_arm64="${SNAPCRAFT_ARCH_TRIPLET}-"
          export CFG_ARM64_core="y"
          export PLATFORM="vexpress-qemu_armv8a"
          export CFG_USER_TA_TARGETS="ta_arm64"
      elif [ "${SNAPCRAFT_TARGET_ARCH}" = "armhf" ]; then
          export CROSS_COMPILE_ta_arm32="${SNAPCRAFT_ARCH_TRIPLET}-"
          export PLATFORM="vexpress-qemu_virt"
          export CFG_USER_TA_TARGETS="ta_arm32"
      fi
      export CROSS_COMPILE="${SNAPCRAFT_ARCH_TRIPLET}-"
      export CROSS_COMPILE_core="${SNAPCRAFT_ARCH_TRIPLET}-"
      export DEBUG=0
      export CFG_TEE_CORE_LOG_LEVEL=1
      export CFG_TEE_TA_LOG_LEVEL=1
      export CFG_TEE_BENCHMARK=n
      make O=${SNAPCRAFT_PART_BUILD}/out -j$(nproc)
      cp -r out/export-ta_arm* ${SNAPCRAFT_PART_INSTALL}/export-ta_arm
    prime:
      - -*
    build-packages:
      - python3-pyelftools

  optee-client:
    plugin: dump
    source: https://github.com/OP-TEE/optee_client.git
    source-type: git
    source-tag: 3.10.0
    override-build: |
      export CROSS_COMPILE="${SNAPCRAFT_ARCH_TRIPLET}-"
      export ARCH="${SNAPCRAFT_TARGET_ARCH}"
      export CFG_TA_TEST_PATH=0
      export CFG_TEE_SUPP_LOG_LEVEL=0
      export DESTDIR="${SNAPCRAFT_PART_INSTALL}"
      export CFG_TEE_CLIENT_LOAD_PATH=""
      make install -j$(nproc)
    prime:
      - usr/lib/lib*so*

  json-c:
    plugin: cmake
    source: https://github.com/json-c/json-c.git
    source-type: git
    source-tag: json-c-0.13.1-20180305
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr
      - -DCMAKE_C_COMPILER=${SNAPCRAFT_ARCH_TRIPLET}-gcc
    stage:
      - usr/include
      - usr/lib/lib*so*
    prime:
      - usr/lib/lib*so*

  optee-fde:
    after:
        - optee-os
        - optee-client
        - json-c
    plugin: nil
    source: https://git.launchpad.net/~ondrak/+git/optee-uc-fde
    source-type: git
    source-branch: master
    override-build: |
        # we are not using TA build here (early TA is used), so
        # it does not matter what key is used to sign built TA
        # support cross build
        export CROSS_COMPILE="${SNAPCRAFT_ARCH_TRIPLET}-"
        export ARCH="${SNAPCRAFT_TARGET_ARCH}"
        export TA_DEV_KIT_DIR="${SNAPCRAFT_STAGE}/export-ta_arm"
        export CFG_TEE_CLIENT_LOG_LEVEL="1"
        export OPTEE_CLIENT_EXPORT="${SNAPCRAFT_STAGE}/usr"
        export DESTDIR=${SNAPCRAFT_PART_INSTALL}
        export O="${SNAPCRAFT_PART_BUILD}/out"
        export CFLAGS="${CFLAGS} -I${SNAPCRAFT_PROJECT_DIR}/parts/json-c/src"
        make -j$(nproc)
        make install
    organize:
        usr/bin/fde-setup: meta/hooks/fde-setup
    stage:
        - meta/
        - usr/bin/fde-reveal-key
    prime:
        - meta/

build-packages:
  - dpkg-dev
  - android-tools-mkbootimg
  - libssl-dev
  - libfdt-dev
  - cpio
  - binutils-aarch64-linux-gnu
  - device-tree-compiler
  - libelf-dev
  - ccache
  - u-boot-tools
  - on amd64:
    - gcc-aarch64-linux-gnu
    - g++-aarch64-linux-gnu
  - else:
    - gcc
    - g++
